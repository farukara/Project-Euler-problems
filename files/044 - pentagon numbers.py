#!python3
# coding: utf-8
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
#https://projecteuler.net/problem=44

from time import perf_counter
from math import sqrt

def timed(function):
    def wrapper(*args, **kwargs):
        start = perf_counter()
        value = function(*args, **kwargs)
        finish = perf_counter()
        print(f"\n\"{function.__name__}\" function took {finish - start:.2f} seconds")
        return value
    return wrapper

def pentagon_sieve(n):
    "returns a sieve list for first n number of pentagon numbers"
    number_pentagon = int(n*(3*n-1)/2)
    sieve = [False]*((number_pentagon+1)*2)
    sieve[1] = True
    i = 2
    while i <= n:
        sieve[int(i*(3*i-1)/2)] = True
        i += 1
    return sieve

@timed
def method1(): #25 seconds
    limit = 10_000
    sieve = pentagon_sieve(limit)
    list_of_pentagons = [i for i in range(len(sieve)) if sieve[i]]

    start = perf_counter()
    candidates = {}
    for i in range(len(list_of_pentagons)):
        for j in range(i+1, len(list_of_pentagons)):
            if sieve[list_of_pentagons[i] + list_of_pentagons[j]] and sieve[list_of_pentagons[j] - list_of_pentagons[i]]:
                difference = (list_of_pentagons[j] - list_of_pentagons[i])
                candidates[difference] = (i,j)
    print()
    print(candidates)
    print(f"Minimum difference: ", difference)
    end = perf_counter()
    print("Time: ", end- start)

@timed
def method2(): #2 seconds
    def is_pentagon(n: int) -> bool:
        "returns true if n is pentagon"
        root = (-1-sqrt(1-(4*3*(2*n*(-1)))))/6
        return root.is_integer()

    def pentagonize(n):
        "returns nth pentagon as int"
        return int(n*(3*n-1)/2)
    limit = 100
    limit_pentagon = pentagonize(limit)
    i = 2
    while True:
        i += 1
        flag = False
        for j in range(1, i):
            if is_pentagon(pentagonize(i) + pentagonize(j)) and is_pentagon(pentagonize(i) - pentagonize(j)):
                print(pentagonize(j) - pentagonize(i))
                flag = True
                break
        if flag:
            break

if __name__ == "__main__":
    method2()
